name: 📚 Update API Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'main/**'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'main/**'
      - 'docs/**'

jobs:
  update-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 📄 Generate OpenAPI spec
      run: |
        python generate_openapi.py
        cp openapi.json docs/
    
    - name: 🎯 Validate OpenAPI spec
      run: |
        # Check if the OpenAPI file is valid JSON
        python -c "import json; json.load(open('docs/openapi.json'))"
        echo "✅ OpenAPI specification is valid JSON"
        
        # Check if the file has the required fields
        python -c "
        import json
        spec = json.load(open('docs/openapi.json'))
        assert 'openapi' in spec, 'Missing openapi field'
        assert 'info' in spec, 'Missing info field'
        assert 'paths' in spec, 'Missing paths field'
        print('✅ OpenAPI specification has required fields')
        print(f'📄 Total endpoints: {len(spec[\"paths\"])}')
        "
    
    - name: 📊 Generate API stats
      run: |
        python -c "
        import json
        import os
        from datetime import datetime

        spec = json.load(open('docs/openapi.json'))
        stats = {
            'generated_at': datetime.now().isoformat(),
            'total_endpoints': len(spec['paths']),
            'version': spec['info']['version'],
            'title': spec['info']['title'],
            'endpoints': list(spec['paths'].keys())
        }

        with open('docs/api-stats.json', 'w') as f:
            json.dump(stats, f, indent=2)

        print(f'📊 API Statistics generated')
        print(f'🔢 Total endpoints: {stats[\"total_endpoints\"]}')
        "
    
    - name: 🚀 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        commit_message: '📚 Update API documentation'
    
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const stats = JSON.parse(fs.readFileSync('docs/api-stats.json', 'utf8'));
          
          const comment = `## 📚 API Documentation Preview
          
          **📊 API Statistics:**
          - 🔢 Total endpoints: ${stats.total_endpoints}
          - 📋 Version: ${stats.version}
          - 🕒 Generated: ${stats.generated_at}
          
          **🔗 Endpoints:**
          ${stats.endpoints.map(endpoint => `- \`${endpoint}\``).join('\n')}
          
          The documentation will be automatically updated when this PR is merged.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
